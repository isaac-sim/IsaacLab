# Copyright (c) 2022-2025, The Isaac Lab Project Developers (https://github.com/isaac-sim/IsaacLab/blob/main/CONTRIBUTORS.md).
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

name: 'Process Test Results'
description: 'Processes XML test results and comments on PR with summary'

inputs:
  results-file:
    description: 'Path to the XML test results file'
    required: true
    default: 'reports/combined-results.xml'
  github-token:
    description: 'GitHub token for API access'
    required: true
  issue-number:
    description: 'PR issue number to comment on'
    required: true
  repo-owner:
    description: 'Repository owner'
    required: true
  repo-name:
    description: 'Repository name'
    required: true

runs:
  using: composite
  steps:
    - name: Process Test Results and Comment on PR
      uses: actions/github-script@v6
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const fs = require('fs');

          let summary;
          let shouldFail = false;

          try {
            // Read the test results XML
            const xmlContent = fs.readFileSync('${{ inputs.results-file }}', 'utf8');

            // Find all <testsuite ...> tags
            const testsuitePattern = /<testsuite[^>]*>/g;
            const testsuiteMatches = xmlContent.match(testsuitePattern);

            if (testsuiteMatches && testsuiteMatches.length > 0) {
              let totalTests = 0;
              let totalFailures = 0;
              let totalErrors = 0;
              let totalSkipped = 0;

              testsuiteMatches.forEach((tag, idx) => {
                const testsMatch = tag.match(/tests="([^"]*)"/);
                const failuresMatch = tag.match(/failures="([^"]*)"/);
                const errorsMatch = tag.match(/errors="([^"]*)"/);
                const skippedMatch = tag.match(/skipped="([^"]*)"/);

                const tests = testsMatch ? parseInt(testsMatch[1]) : 0;
                const failures = failuresMatch ? parseInt(failuresMatch[1]) : 0;
                const errors = errorsMatch ? parseInt(errorsMatch[1]) : 0;
                const skipped = skippedMatch ? parseInt(skippedMatch[1]) : 0;

                totalTests += tests;
                totalFailures += failures;
                totalErrors += errors;
                totalSkipped += skipped;
              });

              const passed = totalTests - totalFailures - totalErrors - totalSkipped;

              summary = `## Combined Test Results\n\n- Total Tests: ${totalTests}\n- Passed: ${passed}\n- Failures: ${totalFailures}\n- Errors: ${totalErrors}\n- Skipped: ${totalSkipped}\n- Test Suites: ${testsuiteMatches.length}\n\n${totalFailures + totalErrors === 0 ? '✅ All tests passed!' : '❌ Some tests failed.'}\n\nDetailed test results are available in the workflow artifacts.`;

              // Set flag to fail if there are any failures or errors
              if (totalFailures > 0 || totalErrors > 0) {
                console.error('❌ Tests failed or had errors');
                shouldFail = true;
              } else {
                console.log('✅ All tests passed successfully');
              }
            } else {
              summary = `## Combined Test Results\n❌ Could not parse XML structure. Raw content preview:\n\`\`\`\n${xmlContent.substring(0, 200)}...\n\`\`\`\n\nPlease check the workflow logs for more details.`;
              shouldFail = true;
            }
          } catch (error) {
            summary = `## Combined Test Results
            ❌ Failed to read test results: ${error.message}

            Please check the workflow logs for more details.`;
            shouldFail = true;
          }

          // Comment on the PR with the test results
          await github.rest.issues.createComment({
            issue_number: ${{ inputs.issue-number }},
            owner: '${{ inputs.repo-owner }}',
            repo: '${{ inputs.repo-name }}',
            body: summary
          });

          // Fail the workflow after commenting if needed
          if (shouldFail) {
            process.exit(1);
          }
