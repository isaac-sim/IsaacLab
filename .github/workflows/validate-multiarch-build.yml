# Copyright (c) 2022-2025, The Isaac Lab Project Developers (https://github.com/isaac-sim/IsaacLab/blob/main/CONTRIBUTORS.md).
# All rights reserved.
#
# SPDX-License-Identifier: BSD-3-Clause

name: Validate Multiarch Build

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to test (leave empty to use current branch)'
        required: false
        default: ''
      isaacsim_versions:
        description: 'IsaacSim versions to test (space-separated)'
        required: false
        default: '5.0.0'
      test_platforms:
        description: 'Platforms to build for (comma-separated)'
        required: false
        default: 'linux/amd64,linux/arm64'
      fallback_amd64_only:
        description: 'Fallback to AMD64 only if multiarch fails'
        required: false
        default: 'true'
        type: boolean
  pull_request:
    branches:
      - main
      - devel
      - 'release/**'
    paths:
      - '.github/workflows/postmerge-ci.yml'
      - '.github/workflows/validate-multiarch-build.yml'
      - 'docker/Dockerfile.base'

# Concurrency control to prevent parallel runs
concurrency:
  group: validate-multiarch-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  NGC_API_KEY: ${{ secrets.NGC_API_KEY }}
  ISAACSIM_BASE_IMAGE: ${{ vars.ISAACSIM_BASE_IMAGE || 'nvcr.io/nvidia/isaac-sim' }}
  ISAACSIM_BASE_VERSIONS_STRING: ${{ github.event.inputs.isaacsim_versions || vars.ISAACSIM_BASE_VERSIONS_STRING || '5.0.0' }}
  ISAACLAB_IMAGE_NAME: ${{ vars.ISAACLAB_IMAGE_NAME || 'isaac-lab-base' }}
  TEST_PLATFORMS: ${{ github.event.inputs.test_platforms || 'linux/amd64,linux/arm64' }}

jobs:
  validate-multiarch-build:
    runs-on: [self-hosted, gpu]
    timeout-minutes: 180
    env:
        DOCKER_HOST: unix:///var/run/docker.sock
        DOCKER_TLS_CERTDIR: ""

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        lfs: true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: linux/arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: ${{ env.TEST_PLATFORMS }}
        driver-opts: |
          image=moby/buildkit:buildx-stable-1

    - name: Verify Multiarch Support
      run: |
        echo "🔍 Verifying multiarch support..."
        docker buildx ls
        echo ""
        echo "📋 Available platforms:"
        docker buildx inspect --bootstrap | grep "Platforms:"
        echo ""
        echo "🔧 QEMU emulators:"
        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes || echo "QEMU setup may need attention"
        echo ""

    - name: Login to NGC
      run: |
        # Only attempt NGC login if API key is available
        if [ -n "${{ env.NGC_API_KEY }}" ]; then
          echo "Logging into NGC registry..."
          docker login -u \$oauthtoken -p ${{ env.NGC_API_KEY }} nvcr.io
          echo "✅ Successfully logged into NGC registry"
        else
          echo "⚠️ NGC_API_KEY not available - skipping NGC login"
          echo "This is normal when secrets are not configured"
        fi

    - name: Validate Multiarch Build (No Push)
      run: |
        # Determine branch name
        if [ -n "${{ github.event.inputs.branch_name }}" ]; then
          BRANCH_NAME="${{ github.event.inputs.branch_name }}"
        else
          BRANCH_NAME="${{ github.ref_name }}"
        fi

        # Replace '/' with '-' and remove any invalid characters for Docker tag
        SAFE_BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/-/g')

        # Use "latest" if branch name is empty or only contains invalid characters
        if [ -z "$SAFE_BRANCH_NAME" ]; then
          SAFE_BRANCH_NAME="latest"
        fi

        # Get the git repository short name
        REPO_SHORT_NAME="${{ github.event.repository.name }}"
        if [ -z "$REPO_SHORT_NAME" ]; then
          REPO_SHORT_NAME="verification"
        fi

        echo "🔍 VALIDATION BUILD PARAMETERS:"
        echo "Branch: $BRANCH_NAME"
        echo "Safe branch name: $SAFE_BRANCH_NAME"
        echo "Repository name: $REPO_SHORT_NAME"
        echo "IsaacSim versions: ${{ env.ISAACSIM_BASE_VERSIONS_STRING }}"
        echo "Test platforms: ${{ env.TEST_PLATFORMS }}"
        echo "⚠️  NOTE: This is a validation build - images will NOT be pushed to registry"
        echo ""

        # Parse the env variable string into an array
        IMAGE_BASE_VERSIONS_STRING="${{ env.ISAACSIM_BASE_VERSIONS_STRING }}"
        # Use set to split the string into positional parameters, then convert to array
        set -- $IMAGE_BASE_VERSIONS_STRING
        IMAGE_BASE_VERSIONS=("$@")

        for IMAGE_BASE_VERSION in "${IMAGE_BASE_VERSIONS[@]}"; do
          IMAGE_BASE_VERSION=$(echo "$IMAGE_BASE_VERSION" | tr -d '[:space:]')

          # Skip empty versions
          if [ -z "$IMAGE_BASE_VERSION" ]; then
            continue
          fi

          # Combine repo short name and branch name for the tag
          COMBINED_TAG="${REPO_SHORT_NAME}-${SAFE_BRANCH_NAME}-${IMAGE_BASE_VERSION}"
          BUILD_TAG="${COMBINED_TAG}-validation-${{ github.run_number }}"

          echo "🏗️  Building validation image: ${{ env.ISAACLAB_IMAGE_NAME }}:$BUILD_TAG"
          echo "IsaacSim version: $IMAGE_BASE_VERSION"
          echo "Platforms: ${{ env.TEST_PLATFORMS }}"

          # Build Docker image for validation (no push)
          docker buildx build \
            --platform ${{ env.TEST_PLATFORMS }} \
            --progress=plain \
            -t ${{ env.ISAACLAB_IMAGE_NAME }}:$BUILD_TAG \
            --build-arg ISAACSIM_BASE_IMAGE_ARG=${{ env.ISAACSIM_BASE_IMAGE }} \
            --build-arg ISAACSIM_VERSION_ARG=$IMAGE_BASE_VERSION \
            --build-arg ISAACSIM_ROOT_PATH_ARG=/isaac-sim \
            --build-arg ISAACLAB_PATH_ARG=/workspace/isaaclab \
            --build-arg DOCKER_USER_HOME_ARG=/root \
            --cache-from type=gha \
            --cache-to type=gha,mode=max \
            -f docker/Dockerfile.base \
            .

          echo "✅ Successfully built validation image: ${{ env.ISAACLAB_IMAGE_NAME }}:$BUILD_TAG"
          echo ""
        done

    - name: Inspect Built Images
      run: |
        echo "🔍 INSPECTING BUILT IMAGES:"
        echo ""

        # List all isaac-lab images
        echo "📋 Available Isaac Lab images:"
        docker images | grep isaac-lab || echo "No isaac-lab images found"
        echo ""

        # For each built image, show platform information
        IMAGE_BASE_VERSIONS_STRING="${{ env.ISAACSIM_BASE_VERSIONS_STRING }}"
        set -- $IMAGE_BASE_VERSIONS_STRING
        IMAGE_BASE_VERSIONS=("$@")

        BRANCH_NAME="${{ github.event.inputs.branch_name || github.ref_name }}"
        SAFE_BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9._-]/-/g')
        REPO_SHORT_NAME="${{ github.event.repository.name }}"

        for IMAGE_BASE_VERSION in "${IMAGE_BASE_VERSIONS[@]}"; do
          IMAGE_BASE_VERSION=$(echo "$IMAGE_BASE_VERSION" | tr -d '[:space:]')
          if [ -z "$IMAGE_BASE_VERSION" ]; then
            continue
          fi

          COMBINED_TAG="${REPO_SHORT_NAME}-${SAFE_BRANCH_NAME}-${IMAGE_BASE_VERSION}"
          BUILD_TAG="${COMBINED_TAG}-validation-${{ github.run_number }}"

          echo "🏷️  Inspecting: ${{ env.ISAACLAB_IMAGE_NAME }}:$BUILD_TAG"

          # Try to inspect the image (this works for multiarch manifests)
          if docker buildx imagetools inspect ${{ env.ISAACLAB_IMAGE_NAME }}:$BUILD_TAG 2>/dev/null; then
            echo "✅ Image manifest found and inspected successfully"
          else
            echo "⚠️  Could not inspect image manifest (this is expected for local builds)"
            # For local builds, just show that the image exists
            if docker images | grep -q "$BUILD_TAG"; then
              echo "✅ Local image exists"
            else
              echo "❌ Local image not found"
            fi
          fi
          echo ""
        done

    - name: Validation Summary
      run: |
        echo "📊 VALIDATION SUMMARY:"
        echo "✅ Multiarch build process completed successfully"
        echo "✅ No images were pushed to registry (validation mode)"
        echo "✅ Build cache was updated for future builds"
        echo ""
        echo "🎯 NEXT STEPS:"
        echo "1. Review the build logs above for any warnings or errors"
        echo "2. If validation looks good, the actual postmerge-ci.yml can be used"
        echo "3. The actual pipeline will push images to the registry"
        echo ""
        echo "🗑️  CLEANUP:"
        echo "Built validation images can be cleaned up locally if needed:"
        docker images | grep validation || echo "No validation images to clean up"
