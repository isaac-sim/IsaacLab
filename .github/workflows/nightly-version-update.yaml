name: Nightly Version Update

on:
  schedule:
    # Runs at midnight every night (UTC)
    - cron: '0 05 * * *'
  workflow_dispatch:  # Allow manual trigger if needed for testing

jobs:
  update_version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on the main branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Check for new commits today
        id: check_commits
        run: |
          # Get the latest commit date in 'YYYY-MM-DD' format
          LAST_COMMIT_DATE=$(git log -1 --format=%cd --date=short)
          TODAY_DATE=$(date +'%Y-%m-%d')
          
          echo "Last commit date: $LAST_COMMIT_DATE"
          echo "Today's date: $TODAY_DATE"

          # Get changes from today (commits after midnight UTC)
          CHANGES_TODAY=$(git diff --since="midnight" --format="%H")
          echo $CHANGES_TODAY

          # If there are changes today in the 'source' or 'apps' folders
          if [[ -n "$CHANGES_TODAY" ]]; then
            echo "Changes detected in the source or apps folders today. Proceeding with version update."
            echo "has_changes=true" >> $GITHUB_ENV
          else
            echo "No changes in the source or apps folders today. Skipping version update."
            echo "has_changes=false" >> $GITHUB_ENV
          fi

      - name: Read current version
        if: env.has_changes == 'true'
        id: read_version
        run: |
          VERSION=$(cat VERSION)
          echo "Current version: $VERSION"
          if [[ $VERSION =~ ^([0-9]+\.[0-9]+\.[0-9]+)\.post([0-9]+)$ ]]; then
            # Increment post-release version if the format is already postX
            BASE_VERSION="${BASH_REMATCH[1]}"
            POST_VERSION=$((BASH_REMATCH[2] + 1))
            NEW_VERSION="${BASE_VERSION}.post${POST_VERSION}"
          else
            # First nightly update
            BASE_VERSION=$VERSION
            NEW_VERSION="${BASE_VERSION}.post1"
          fi
          echo "New version: $NEW_VERSION"
          # Save the new version to an environment variable
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Update VERSION file
        if: env.has_changes == 'true'
        run: echo "${{ env.NEW_VERSION }}" > VERSION

      - name: Commit and push changes
        if: env.has_changes == 'true'
        uses: EndBug/add-and-commit@v7
        with:
          author_name: 'GitHub Actions'
          author_email: 'actions@github.com'
          message: "Bumps version to ${{ env.NEW_VERSION }}"
